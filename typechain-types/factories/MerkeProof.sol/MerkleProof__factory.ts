/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  MerkleProof,
  MerkleProofInterface,
} from "../../MerkeProof.sol/MerkleProof";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "_proof",
        type: "bytes32[]",
      },
      {
        internalType: "bytes32",
        name: "_root",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_leaf",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610593806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806321fb335c14610030575b600080fd5b61004a60048036038101906100459190610320565b610060565b60405161005791906103be565b60405180910390f35b60008083905060005b86518110156101385760006002856100819190610408565b036100d0578187828151811061009a57610099610439565b5b60200260200101516040516020016100b3929190610489565b604051602081830303815290604052805190602001209150610116565b8681815181106100e3576100e2610439565b5b6020026020010151826040516020016100fd929190610489565b6040516020818303038152906040528051906020012091505b60028461012391906104e4565b9350808061013090610515565b915050610069565b50848114915050949350505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6101a982610160565b810181811067ffffffffffffffff821117156101c8576101c7610171565b5b80604052505050565b60006101db610147565b90506101e782826101a0565b919050565b600067ffffffffffffffff82111561020757610206610171565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b6102308161021d565b811461023b57600080fd5b50565b60008135905061024d81610227565b92915050565b6000610266610261846101ec565b6101d1565b9050808382526020820190506020840283018581111561028957610288610218565b5b835b818110156102b2578061029e888261023e565b84526020840193505060208101905061028b565b5050509392505050565b600082601f8301126102d1576102d061015b565b5b81356102e1848260208601610253565b91505092915050565b6000819050919050565b6102fd816102ea565b811461030857600080fd5b50565b60008135905061031a816102f4565b92915050565b6000806000806080858703121561033a57610339610151565b5b600085013567ffffffffffffffff81111561035857610357610156565b5b610364878288016102bc565b94505060206103758782880161023e565b93505060406103868782880161023e565b92505060606103978782880161030b565b91505092959194509250565b60008115159050919050565b6103b8816103a3565b82525050565b60006020820190506103d360008301846103af565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610413826102ea565b915061041e836102ea565b92508261042e5761042d6103d9565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b61048361047e8261021d565b610468565b82525050565b60006104958285610472565b6020820191506104a58284610472565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006104ef826102ea565b91506104fa836102ea565b92508261050a576105096103d9565b5b828204905092915050565b6000610520826102ea565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610552576105516104b5565b5b60018201905091905056fea2646970667358221220ed86314c09fab550f52770652ef1af0fcc12be078c760ce3cdd82ade9c5da5cb64736f6c63430008110033";

type MerkleProofConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MerkleProofConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MerkleProof__factory extends ContractFactory {
  constructor(...args: MerkleProofConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MerkleProof> {
    return super.deploy(overrides || {}) as Promise<MerkleProof>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MerkleProof {
    return super.attach(address) as MerkleProof;
  }
  override connect(signer: Signer): MerkleProof__factory {
    return super.connect(signer) as MerkleProof__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleProofInterface {
    return new utils.Interface(_abi) as MerkleProofInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MerkleProof {
    return new Contract(address, _abi, signerOrProvider) as MerkleProof;
  }
}
